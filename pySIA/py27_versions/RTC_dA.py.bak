# -*- coding: utf-8 -*-
"""
Created on Thu Nov 12 22:01:37 2015

@author: phil
"""
import os
import sys
import timeit
lib_path = os.path.abspath(os.path.join('DeepLearningTutorials'))
sys.path.append(lib_path)
import gzip
try:
    import cPickle as pickle
except:
    import pickle
    
import numpy as np

import theano
import theano.tensor as T
from theano.tensor.shared_randomstreams import RandomStreams

from logistic_sgd import load_data
from utils import tile_raster_images

try:
    import PIL.Image as Image
except ImportError:
    import Image
    
from p_utils import load_shared_data
    
class RTC_dA(object):


    def __init__(
        self,
        numpy_rng,
        theano_rng=None,
        input=None,
        resp=None,
        n_visible=784,
        n_hidden=500,
        W=None,
        bhid=None,
        bvis=None,
        n_batchsize=1,
        activation = 'sigmoid'
        
    ):
        
        self.n_visible = n_visible
        self.n_hidden = n_hidden
        self.n_batchsize = n_batchsize
        # create a Theano random generator that gives symbolic random values
        if not theano_rng:
            theano_rng = RandomStreams(numpy_rng.randint(2 ** 30))

        # note : W' was written as `W_prime` and b' as `b_prime`
        if not W:
            # W is initialized with `initial_W` which is uniformely sampled
            # from -4*sqrt(6./(n_visible+n_hidden)) and
            # 4*sqrt(6./(n_hidden+n_visible))the output of uniform if
            # converted using asarray to dtype
            # theano.config.floatX so that the code is runable on GPU
            initial_W = np.asarray(
                numpy_rng.uniform(
                    low=-4 * np.sqrt(6. / (n_hidden + n_visible)),
                    high=4 * np.sqrt(6. / (n_hidden + n_visible)),
                    size=(n_visible, n_hidden)
                ),
                dtype=theano.config.floatX
            )
            W = theano.shared(value=initial_W, name='W', borrow=True)

        if not bvis:
            bvis = theano.shared(
                value=np.zeros(
                    n_visible,
                    dtype=theano.config.floatX
                ),
                borrow=True
            )

        if not bhid:
            bhid = theano.shared(
                value=np.zeros(
                    n_hidden,
                    dtype=theano.config.floatX
                ),
                name='b',
                borrow=True
            )

        self.W = W
        # b corresponds to the bias of the hidden
        self.b = bhid
        # b_prime corresponds to the bias of the visible
        self.b_prime = bvis
        # tied weights, therefore W_prime is W transpose
        self.W_prime = self.W.T
        self.theano_rng = theano_rng
        self.activation = activation
        # if no input is given, generate a variable representing the input
        if input is None:
            # we use a matrix because we expect a minibatch of several
            # examples, each example being a row
            self.x = T.fmatrix(name='input')
        else:
            self.x = input
            
        if resp is None:
            self.y = T.fvector(name='resp')
        else:
            self.y = resp   

        self.params = [self.W, self.b, self.b_prime]

    def get_corrupted_input(self, input, corruption_level):
        """This function keeps ``1-corruption_level`` entries of the inputs the
        same and zero-out randomly selected subset of size ``coruption_level``
        Note : first argument of theano.rng.binomial is the shape(size) of
               random numbers that it should produce
               second argument is the number of trials
               third argument is the probability of success of any trial

                this will produce an array of 0s and 1s where 1 has a
                probability of 1 - ``corruption_level`` and 0 with
                ``corruption_level``

                The binomial function return int64 data type by
                default.  int64 multiplicated by the input
                type(floatX) always return float64.  To keep all data
                in floatX when floatX is float32, we set the dtype of
                the binomial to floatX. As in our case the value of
                the binomial is always 0 or 1, this don't change the
                result. This is needed to allow the gpu to work
                correctly as it only support float32 for now.

        """
        return self.theano_rng.binomial(size=input.shape, n=1,
                                        p=1 - corruption_level,
                                        dtype=theano.config.floatX) * input

    def get_hidden_values(self, input,activation=None):
        """ Computes the values of the hidden layer """
        if activation == None:
            activation = self.activation
        
        if activation == 'sigmoid':
            return T.nnet.sigmoid(T.dot(input, self.W) + self.b)
        elif activation == 'relu':
            return T.nnet.relu(T.dot(input, self.W) + self.b)
        elif activation == 'softmax':
            return T.nnet.softmax(T.dot(input, self.W) + self.b)
        else:
            return T.nnet.sigmoid(T.dot(input, self.W) + self.b)
    def get_reconstructed_input(self, hidden,activation=None):
        """Computes the reconstructed input given the values of the
        hidden layer

        """
        if activation == None:
            activation = self.activation
        
        if activation == 'sigmoid':
            return T.nnet.sigmoid(T.dot(hidden, self.W_prime) + self.b_prime)
        elif activation == 'relu':
            return T.nnet.relu(T.dot(hidden, self.W_prime) + self.b_prime)
        elif activation == 'softmax':
            return T.nnet.softmax(T.dot(hidden, self.W_prime) + self.b_prime)
        else:
            return T.nnet.sigmoid(T.dot(hidden, self.W_prime) + self.b_prime)
            

        
        
    def get_cost_updates(self, corruption_level, learning_rate,errorFunc='crossEntropy'):
        """ This function computes the cost and the updates for one trainng
        step of the dA """

        tilde_x = self.get_corrupted_input(self.x, corruption_level)
        hid = self.get_hidden_values(tilde_x)
        z = self.get_reconstructed_input(hid)
        # note : we sum over the size of a datapoint; if we are using
        #        minibatches, L will be a vector, with one entry per
        #        example in minibatch
        
        
        if errorFunc == 'crossEntropy':
            error =  self.x * T.log(z) + (1 - self.x) * T.log(1 - z)
        elif errorFunc == 'sse':
            error = T.square(self.x -z)
        else:
            error =  self.x * T.log(z) + (1 - self.x) * T.log(1 - z)
        
        
        
        
        L = - T.sum(T.reshape(self.y,(T.shape(self.y)[0],1)) * error, axis=1)
        # note : L is now a vector, where each element is the
        #        cross-entropy cost of the reconstruction of the
        #        corresponding example of the minibatch. We need to
        #        compute the average of all these to get the cost of
        #        the minibatch
        cost = T.mean(L)

        # compute the gradients of the cost of the `dA` with respect
        # to its parameters
        gparams = T.grad(cost, self.params)
        # generate the list of updates
        updates = [
            (param, param - learning_rate * gparam)
            for param, gparam in zip(self.params, gparams)
        ]

        return (cost, updates)


def test_dA(learning_rate=0.1, training_epochs=25,
            dataset='mnist.pkl.gz',
            batch_size=20, output_folder='dA_plots',corruption_level = 50,
            nHidden = 100):

    """
    This demo is tested on MNIST

    :type learning_rate: float
    :param learning_rate: learning rate used for training the DeNosing
                          AutoEncoder

    :type training_epochs: int
    :param training_epochs: number of epochs used for training

    :type dataset: string
    :param dataset: path to the picked dataset

    """
    f = gzip.open('data/mnist.pkl.gz', 'rb')
    train_set, valid_set, test_set = pickle.load(f)
    
    
    
    train_set_x  = load_shared_data(train_set[0])
    
    train_y = train_set[1] ==5
    train_y = train_y.astype('int')
#    train_y = np.ones(np.shape(train_set[1]))
    
    
    
    train_y = train_y.astype('float')
    train_set_y = load_shared_data(train_y)

    
    # compute number of minibatches for training, validation and testing
    n_train_batches = train_set_x.get_value(borrow=True).shape[0] / batch_size
    
    train_set_x = T.cast(train_set_x, 'float32')
    train_set_y = T.cast(train_set_y, 'float32')
    # start-snippet-2
    # allocate symbolic variables for the data
    index = T.lscalar()    # index to a [mini]batch
    x = T.matrix('x')  # the data is presented as rasterized images
    y = T.vector('y')
    # end-snippet-2
    
    nRowsCols = np.floor(np.sqrt(nHidden)).astype('int')
        
    
    if not os.path.isdir(output_folder):
        os.makedirs(output_folder)
    os.chdir(output_folder)

    ####################################
    # BUILDING THE MODEL NO CORRUPTION #
    ####################################

    rng = np.random.RandomState(123)
    theano_rng = RandomStreams(rng.randint(2 ** 30))


    da = RTC_dA(
        numpy_rng=rng,
        theano_rng=theano_rng,
        input=x,
        resp=y,
        n_visible=28 * 28,
        n_hidden=nHidden,
        activation = 'sigmoid'
    )

    cost, updates = da.get_cost_updates(
        corruption_level=float(corruption_level)/100.0,
        learning_rate=learning_rate,
        errorFunc = 'crossEntropy'
    )

    train_da = theano.function(
        [index],
        cost,
        updates=updates,
        givens={
            x: train_set_x[index * batch_size: (index + 1) * batch_size],
            y:train_set_y[index * batch_size: (index + 1) * batch_size]
        }
    )

    start_time = timeit.default_timer()

    ############
    # TRAINING #
    ############

    # go through training epochs
    for epoch in xrange(training_epochs):
        # go through trainng set
        c = []
        for batch_index in xrange(n_train_batches):
            c.append(train_da(batch_index))

        print 'Training epoch %d, cost ' % epoch, np.mean(c)

    end_time = timeit.default_timer()

    training_time = (end_time - start_time)

    print >> sys.stderr, ('The 50% corruption code for file ' +
                          os.path.split(__file__)[1] +
                          ' ran for %.2fm' % (training_time / 60.))
    # end-snippet-3

    # start-snippet-4
    imageName = 'filters_corruption_' + str(corruption_level) + '.png'
    image = Image.fromarray(tile_raster_images(
        X=da.W.get_value(borrow=True).T,
        img_shape=(28, 28), tile_shape=(nRowsCols, nRowsCols),
        tile_spacing=(1, 1)))
        
    image.save(imageName)

    os.chdir('../')
    
    


if __name__ == '__main__':
    test_dA()
